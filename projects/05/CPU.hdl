/*
This file is part of www.nand2tetris.org and the book "The Elements of
Computing Systems" by Nisan and Schocken, MIT Press.
File name: projects/05/CPU.hdl

The Hack CPU (Central Processing unit), consisting of an ALU, two registers
named A and D, and a program counter named PC.

The CPU is designed to fetch and execute instructions written in the Hack
machine language. In particular, it functions as follows:

* Executes the inputted instruction according to the Hack machine
  language specification. The D and A in the language specification
  refer to CPU-resident registers, while M refers to the external
  memory location addressed by A, i.e. to Memory[A]. The inM input
  holds the value of this location.
* If the current instruction needs to write a value to M, the value is placed
  in outM, the address of the target location is placed in the addressM output,
  and the writeM control bit is asserted. (When writeM==0, any value may appear
  in outM). The outM and writeM outputs are combinational: they are affected
  instantaneously by the execution of the current instruction.
* The addressM and pc outputs are clocked: although they are affected by the
  execution of the current instruction, they commit to their new values only in
  the next time step.
* If reset==1 then the CPU jumps to address 0 (i.e. pc is set to 0 in next time
  step) rather than to the address resulting from executing the current
  instruction.

This chip decodes computer instructions.

See The Elements of Computing Systems, p.94.

Inputs:
  * the instruction to be decoded
  * something from the ALU? (jump?)

Outputs:
  * isAddress: true if this is an A instruction
  * isCompute: true if this is an C instruction
  * something to select between A and M as input to the ALU?
  * address to the A register?
  * address to the D register?
  * the compute commands to the ALU
  * something in to the PC? Increment? Load?
  * writeM

*/

CHIP CPU {

  IN  inM[16],         // M value input  (M = contents of RAM[A])
      instruction[16], // Instruction for execution
      reset;           // Signals whether to re-start the current
                       // program (reset==1) or continue executing
                       // the current program (reset==0).

  OUT outM[16],        // M value output
      writeM,          // Write to M? 
      addressM[15],    // Address in data memory (of M)
      pc[15];          // address of next instruction

  PARTS:
    // decode the instruction into components
    Not(in=instruction[15], out=IsAInstruction);
    Not(in=IsAInstruction, out=IsCInstruction);
    And(a=IsCInstruction, b=instruction[0], out=jump3);
    And(a=IsCInstruction, b=instruction[1], out=jump2);
    And(a=IsCInstruction, b=instruction[2], out=jump1);
    And(a=IsCInstruction, b=instruction[3], out=writeM);
    And(a=IsCInstruction, b=instruction[4], out=writeD);
    And(a=IsCInstruction, b=instruction[5], out=writeA);
    And(a=IsCInstruction, b=instruction[12], out=compA);

    // A (address) register control logic
    Mux16(a=ALUout, b=instruction, sel=IsAInstruction, out=AMuxOut);
    Or(a=IsAInstruction, b=writeA, out=loadA);
    ARegister(in=AMuxOut, load=loadA, out=ARegOut, out[0..14]=addressM);

    // D (data) register control logic
    DRegister(in=ALUout, load=writeD, out=DRegOut);

    // ALU control logic:
    //  - includes A-or-M mux, y-input to ALU
    Mux16(a=ARegOut, b=inM, sel=compA, out=AMRegOut);
    ALU(x=DRegOut, y=AMRegOut, zx=instruction[11], nx=instruction[10],
        zy=instruction[9], ny=instruction[8], f=instruction[7],
        no=instruction[6], out=ALUout, out=outM, zr=ALUzr, ng=ALUng);

    // jump logic: jump if any of these conditions are met:
    //  - if jump1 && ALUng then jump
    //  - if jump2 && ALUzr then jump
    //  - if jump3 && ALUgt then jump
    // Note: ALUgt is generated from !(ALUng || ALUzr)
    Or(a=ALUng, b=ALUzr, out=ALUle);  // ALU <= 0
    Not(in=ALUle, out=ALUgt);         // ALU > 0
    And(a=jump1, b=ALUng, out=JumpLT);
    And(a=jump2, b=ALUzr, out=JumpZR);
    And(a=jump3, b=ALUgt, out=JumpGT);

    // combine ORs
    Or(a=JumpLT, b=JumpZR, out=JumpLTZR);
    Or(a=JumpLTZR, b=JumpGT, out=jmp);
    Not(in=jmp, out=nojmp);

    // Program Counter (PC) connections
    PC(in=ARegOut, load=jmp, inc=nojmp, reset=reset, out[0..14]=pc);
}
