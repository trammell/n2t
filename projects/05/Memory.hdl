/*

This file is part of www.nand2tetris.org and the book "The Elements of
Computing Systems" by Nisan and Schocken, MIT Press.
File name: projects/05/Memory.hdl

This chip defines the complete address space of the Hack computer's memory,
including RAM and memory-mapped I/O.

The chip facilitates read and write operations, as follows:
    Read: out(t) = Memory[address(t)](t)
    Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)

In words: the chip always outputs the value stored at the memory location
specified by address. If load==1, the in value is loaded into the memory
location specified by address. This value becomes available through the "out"
output from the next time step onward.

Address space rules:
- Only the upper 16K+8K+1 words of the Memory chip are used.
- Access to address>0x6000 is invalid.
- Access to any address in the range 0x4000-0x5FFF results in accessing
  the screen memory map.
- Access to address 0x6000 results in accessing the keyboard memory map.
- The behavior in these addresses is described in the Screen and Keyboard
  chip specifications given in the book.

Memory map:

0x0000 = 0000 0000 0000 0000    RAM
...
0x3fff = 0011 1111 1111 1111    RAM
0x4000 = 0100 0000 0000 0000    SCREEN
0x4001 = 0100 0000 0000 0001    SCREEN
...
0x5fff = 0101 1111 1111 1111    SCREEN
0x6000 = 0110 0000 0000 0000    KBD

We only use address[0..14]; address[15] is ignored.

    if address[14] is low, then it's RAM
    if address[14] is high and address[13] is low, then it's screen
    if address[14] is high and address[13] is high, then it's KBD

Idea: could use a Mux4Way to send the load signal to the RAM/Screen/Keyboard.
      Might be more trouble than it's worth due to extra control circuits.

*/

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:

    /* calculate some helper booleans:
     *   - isRam is true if this is a RAM access (bit 14 is low)
     *   - isKbd is true if this is a keyboard access (bits 13, 14 are high)
     *   - isScreen is true if this is a screen access (bit 13 low, 14 high)
     */

    Not(in=address[14], out=isRam);
    And(a=address[13], b=address[14], out=isKbd);
    Not(in=isKbd, out=isNotKbd);
    And(a=address[14], b=isNotKbd, out=isScreen);

    /* calculate load_x circuits */
    And(a=isRam, b=load, out=loadRam);
    And(a=isScreen, b=load, out=loadScreen);

    RAM16K(in=in, load=loadRam, address=address[0..13], out=ramOut);
    Screen(in=in, load=loadScreen, address=address[0..12], out=screenOut);
    Keyboard(out=kbdOut);

    /* add Mux to coordinate outputs (nice that sel corresponds to address) */
    Mux4Way16(a=ramOut, b=ramOut, c=screenOut, d=kbdOut,
              sel=address[13..14], out=out);
}
